#!/usr/bin/python3

import multiprocessing as multi
import numpy as np
import matplotlib.pyplot as plt
import sys
from matplotlib.patches import FancyArrowPatch
from mpl_toolkits.mplot3d import proj3d
from scipy.constants import pi
from mpl_toolkits.mplot3d import axes3d

# defining the class for later 3D arrow plots
class Arrow3D(FancyArrowPatch):
    def __init__(self, xs, ys, zs, *args, **kwargs):
        FancyArrowPatch.__init__(self, (0,0), (0,0), *args, **kwargs)
        self._verts3d = xs, ys, zs

    def draw(self, renderer):
        xs3d, ys3d, zs3d = self._verts3d
        xs, ys, zs = proj3d.proj_transform(xs3d, ys3d, zs3d, renderer.M)
        self.set_positions((xs[0],ys[0]),(xs[1],ys[1]))
        FancyArrowPatch.draw(self, renderer)

# DistancePBC delivers the smallest distance between two points according to the periodix boundary conditions PBC
def DistancePBC(x,y,grid_size, vectorial=False):
  delta = x-y
  delta = np.where((np.abs(delta) > 0.5*grid_size), np.where(delta<0, -delta - grid_size, grid_size-delta), -delta)
  if vectorial==True:
    return delta, np.sqrt(np.sum(delta**2))
  else:
    return np.sqrt(np.sum(delta**2))

#LennardJones returns potential energy for each particle of a pair of particles
def LennardJones(x_i, x_j, grid_size):
  r_ij = DistancePBC(x_i, x_j, grid_size)
  V = 1/r_ij**12 - 1/r_ij**6
  return V

#LennardJonesForce returns the force acting on a particle on position x_i from a particle on x_j(vectors)
def LennardJonesForce(x_i, x_j, grid_size):
  r_vec, r_ij = DistancePBC(x_i, x_j, grid_size, vectorial=True)
  F = r_vec/r_ij * (6*r_ij**(-7) - 12*r_ij**(-13))
  return F

 #PotentialEnergy returns the potential of a particle x_i. x should be an array, containing 3D-position vectors of all particles, i is the position of the particle for which the potential is calculated
def PotentialEnergy(x,i, grid_size):  
  x_i = x[i]
  indices = np.arange(len(x))
  indices = np.delete(indices, i, axis=0)
  potential = 0
  for j in indices:
    potential += LennardJones(x_i, x[j], grid_size)
  return potential

# TotalPotentialEnergy returns the total potential energy of a position configuration x (array of position-vectors)
def TotalPotentialEnergy(x, grid_size):
  E_pot = 0
  for n in range(len(x)):
    E_pot += PotentialEnergy(x, n, grid_size)
  return E_pot

# TotalKineticEnergy returns the total kinetic energy of an array of velocity vectors
def TotalKineticEnergy(v):
  return np.sum(0.5*v**2)

# TotalForce returns the sum of all forces acting on the particle x_i, x should be the array containing all particle positions
def TotalForce(x, i, grid_size):
  x_i = x[i]
  indices = np.arange(len(x))
  indices = np.delete(indices, i, axis=0)
  F_tot = np.zeros(3)
  for j in indices:
    F_tot += LennardJonesForce(x_i, x[j], grid_size)
  return F_tot

# Accelerations returns the total acceleration on every particle due to the surrounding potential
def Accelerations(x, grid_size):
  a = np.zeros((len(x),3))
  for i in range(len(x)):
    a[i] = TotalForce(x, i, grid_size)
  return a

# VerletVelocity returns the x(n+1) and v(n+1), when given x,v and a as arrays
def VerletVelocity(x, v, dt, grid_size):
  a = Accelerations(x, grid_size)
  x_next = x + v*dt + (a/2)*dt**2
  a_next = Accelerations(x_next, grid_size)
  v_next = v + (a_next+a)/2*dt
  return np.mod(x_next, grid_size), v_next

# BerendsenThermostat returns a rescaling factor for the velocities v of the particles to keep the systems temperature around T_0, tau is a coupling constant, dt is the integration timestep of the system
def BerendsenThermostat(T, T_0, tau, dt):
  lambda_rescaling = np.sqrt(1 + (dt/tau)*((T_0/T) - 1))
  return lambda_rescaling 

# Distances returns an array of all occuring distances from a set of position vectors x
def RDFHistogram(x, grid_size):
  r = []
  for i in range(len(x)):
    for j in range(i+1, len(x)):
      r.append(DistancePBC(x[i],x[j], grid_size))
  r = np.array(r)
  histo = np.histogram(r, bins=100, range=(0.5, grid_size/2))
  return histo

# initiate_E_fixed creates random positions and velocities of particles in a grid sized gridsize^3 for a fixed total energy E_tot
def initiate_E_fixed(grid_size, N_part, E_tot):
  grid_positions = np.zeros((grid_size**3,3))
  v = np.zeros((N_part,3))
  x = np.zeros((N_part,3))

  # define all possible positions in grid
  n=0
  for i in range(grid_size):
    for j in range(grid_size):
      for k in range(grid_size):
        grid_positions[n] = np.array([i,j,k])
        n += 1

  # in this case all positions in the grid are occupied
  if N_part == grid_size**3:
    x = grid_positions

  # else the occupied positions in the grid will be selected randomly
  elif N_part < grid_size**3:
    for i in range(N_part):
      rand = np.random.random_integers(len(grid_positions))
      x[i] = grid_positions[rand]
      grid_positions = np.delete(grid_positions, rand, axis = 0)

  # now the potential energy of the configuration will be calculated
  E_pot = 0
  for n in range(len(x)):
    E_pot += PotentialEnergy(x, n, grid_size)

  # the remaining energy will be equally distributed as initial velocity of the particles
  E_kin = E_tot - E_pot
  v_init = np.sqrt(E_kin)
  for n in range(N_part):
    theta = np.random.random()*2*pi
    phi = np.random.random()*pi
    v[n] = v_init*np.array([np.cos(theta)*np.sin(phi), np.sin(theta)*np.sin(phi), np.cos(phi)])

  return x,v

# initiate_vmax_fixed returns random positions in a grid sized grid_size^3, the initial velocities are chosen randomly from the interval [0, vmax)
def initiate_vmax_fixed(grid_size, N_part, vmax = 1):
  grid_positions = np.zeros(((grid_size)**3,3))
  v = np.zeros((N_part,3))
  x = np.zeros((N_part,3))

  # define all possible positions in grid
  n=0
  for i in range(grid_size):
    for j in range(grid_size):
      for k in range(grid_size):
        # the position +0.5 is chosen, so that initially there is no particle directly next to the border
        grid_positions[n] = np.array([i+0.5,j+0.5,k+0.5])
        n += 1

  # in this case all positions in the grid are occupied
  if N_part == (grid_size)**3:
    x = grid_positions

  # else the occupied positions in the grid will be selected randomly
  elif N_part < (grid_size)**3:
    for i in range(N_part):
      rand = np.random.random_integers(len(grid_positions)-1)
      x[i] = grid_positions[rand]
      grid_positions = np.delete(grid_positions, rand, axis = 0)

  # the initial velocities will be rnd([0,vmax)), with random directions
  for n in range(N_part):
    theta = np.random.random()*2*pi
    phi = np.random.random()*pi
    v_init = np.random.random()*vmax
    v[n] = v_init*np.array([np.cos(theta)*np.sin(phi), np.sin(theta)*np.sin(phi), np.cos(phi)])

  return x, v

# plot_positions plots all positions in a 3D plot and saves it as a png
def plot_positions(x, a, grid_size, n):
  plt.ioff()
  fig = plt.figure()
  axe = fig.add_subplot(111, projection='3d')
  xs, ys, zs = np.zeros(len(x)), np.zeros(len(x)), np.zeros(len(x))
  for i,el in enumerate(x):
    xs[i] = el[0]
    ys[i] = el[1]
    zs[i] = el[2]
  axe.scatter(xs,ys,zs, s=500)
  ''' 
  for i, acc in enumerate(a):
    acc /= 10
    acc += x[i]
    axe.add_artist(Arrow3D(*zip(x[i],acc), mutation_scale=20, lw=1, arrowstyle="-|>", color="k"))
  '''
  axe.set_xlim(0, grid_size)
  axe.set_ylim(0, grid_size)
  axe.set_zlim(0, grid_size)
  axe.set_title('Step %5.0f' %n)
  fig.savefig('Movie/step'+str(n)+'.png')
  plt.close('all')

def Simulation(grid_size, N_part, T=0.5, steps=100, vmax=2, plot_movement=True, plot_energies=True, plot_RDF=True, thermostat=True):
  dt = T/steps
  x, v = initiate_vmax_fixed(grid_size, N_part, vmax)
  E_kin_init = TotalKineticEnergy(v)
  E_kin = []
  E_pot = []
  E_tot = []
  Temperatures = []

  if thermostat ==True:
    T_0 = np.sum(v**2)
    tau = 10*dt
  
  if plot_RDF == True:
    RDF, bins = RDFHistogram(x, grid_size)

  for n in range(steps):
    E_kin_i = TotalKineticEnergy(v)
    E_pot_i = TotalPotentialEnergy(x, grid_size)
    E_tot_i = E_kin_i + E_pot_i
    T_i = np.sum(v**2)
    
    E_pot.append(E_pot_i)
    E_kin.append(E_kin_i)
    E_tot.append(E_tot_i)
    Temperatures.append(T_i)
            
    if thermostat == True:
      v *= BerendsenThermostat(T_i, T_0, tau, dt)

    if plot_movement == True:
      acc = 0
      #acc = Accelerations(x, grid_size)
      plot_positions(x, acc, grid_size, n)
    
    if plot_RDF ==True:
      RDF_i = RDFHistogram(x, grid_size)[0]
      RDF += RDF_i
             
    x, v = VerletVelocity(x, v, dt, grid_size)
    
    print(str(int(n/steps*100)), '% done.', end='\t')
    print('E_tot = %5.3f' %E_tot_i, end='\r')
    
  if plot_energies == True:
    t = np.arange(steps)
    fig2 = plt.figure()
    axe2 = fig2.add_subplot(111)
    axe2.set_ylabel('E')
    axe2.set_xlabel('n$_{steps}$')
    axe2.set_title('Energies for v$_{max}$ = %5.1f, n$_{steps}$= %5.0f, $\Delta$t=%5.3f' %(vmax, steps, dt))
    axe2.plot(t, E_kin, label='$E_{kin}$')
    axe2.plot(t, E_pot, label='$E_{pot}$')
    axe2.plot(t, E_tot, label='$E_{tot}')
    axe2.legend(loc=0)
    fig2.savefig('Graphs/Energies_grid'+str(grid_size)+'_vmax'+str(vmax)+'_thermo'+str(thermostat))

  if plot_RDF ==True:
    width = 0.7*(bins[1]-bins[0])
    left = bins[:-1]
     
    fig3 = plt.figure()
    axe3 = fig3.add_subplot(111)
    axe3.bar(left, RDF, width=width)
    axe3.set_title('RDF for v$_{max}$ = %5.1f, n$_{steps}$= %5.0f, $\Delta$t=%5.3f, thermostat: %r' %(vmax, steps, dt, thermostat))
    axe3.set_xlim(xmax = grid_size/2)
    axe3.set_xlabel('Distance r')
    axe3.set_ylabel('Occurence')
    fig3.savefig('Graphs/RDF_grid'+str(grid_size)+'_vmax'+str(vmax)+'_thermo'+str(thermostat))
